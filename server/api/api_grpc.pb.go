// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniverseSplitterClient is the client API for UniverseSplitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniverseSplitterClient interface {
	ExecuteSplit(ctx context.Context, in *ExecuteSplitRequest, opts ...grpc.CallOption) (*ExecuteSplitResponse, error)
	RetrieveStats(ctx context.Context, in *RetrieveStatsRequest, opts ...grpc.CallOption) (*RetrieveStatsResponse, error)
	ReportClientError(ctx context.Context, in *ReportClientErrorRequest, opts ...grpc.CallOption) (*ReportClientErrorResponse, error)
}

type universeSplitterClient struct {
	cc grpc.ClientConnInterface
}

func NewUniverseSplitterClient(cc grpc.ClientConnInterface) UniverseSplitterClient {
	return &universeSplitterClient{cc}
}

func (c *universeSplitterClient) ExecuteSplit(ctx context.Context, in *ExecuteSplitRequest, opts ...grpc.CallOption) (*ExecuteSplitResponse, error) {
	out := new(ExecuteSplitResponse)
	err := c.cc.Invoke(ctx, "/com.freeuniversesplitter.UniverseSplitter/ExecuteSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeSplitterClient) RetrieveStats(ctx context.Context, in *RetrieveStatsRequest, opts ...grpc.CallOption) (*RetrieveStatsResponse, error) {
	out := new(RetrieveStatsResponse)
	err := c.cc.Invoke(ctx, "/com.freeuniversesplitter.UniverseSplitter/RetrieveStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universeSplitterClient) ReportClientError(ctx context.Context, in *ReportClientErrorRequest, opts ...grpc.CallOption) (*ReportClientErrorResponse, error) {
	out := new(ReportClientErrorResponse)
	err := c.cc.Invoke(ctx, "/com.freeuniversesplitter.UniverseSplitter/ReportClientError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniverseSplitterServer is the server API for UniverseSplitter service.
// All implementations must embed UnimplementedUniverseSplitterServer
// for forward compatibility
type UniverseSplitterServer interface {
	ExecuteSplit(context.Context, *ExecuteSplitRequest) (*ExecuteSplitResponse, error)
	RetrieveStats(context.Context, *RetrieveStatsRequest) (*RetrieveStatsResponse, error)
	ReportClientError(context.Context, *ReportClientErrorRequest) (*ReportClientErrorResponse, error)
	mustEmbedUnimplementedUniverseSplitterServer()
}

// UnimplementedUniverseSplitterServer must be embedded to have forward compatible implementations.
type UnimplementedUniverseSplitterServer struct {
}

func (UnimplementedUniverseSplitterServer) ExecuteSplit(context.Context, *ExecuteSplitRequest) (*ExecuteSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSplit not implemented")
}
func (UnimplementedUniverseSplitterServer) RetrieveStats(context.Context, *RetrieveStatsRequest) (*RetrieveStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStats not implemented")
}
func (UnimplementedUniverseSplitterServer) ReportClientError(context.Context, *ReportClientErrorRequest) (*ReportClientErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportClientError not implemented")
}
func (UnimplementedUniverseSplitterServer) mustEmbedUnimplementedUniverseSplitterServer() {}

// UnsafeUniverseSplitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniverseSplitterServer will
// result in compilation errors.
type UnsafeUniverseSplitterServer interface {
	mustEmbedUnimplementedUniverseSplitterServer()
}

func RegisterUniverseSplitterServer(s grpc.ServiceRegistrar, srv UniverseSplitterServer) {
	s.RegisterService(&UniverseSplitter_ServiceDesc, srv)
}

func _UniverseSplitter_ExecuteSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseSplitterServer).ExecuteSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.freeuniversesplitter.UniverseSplitter/ExecuteSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseSplitterServer).ExecuteSplit(ctx, req.(*ExecuteSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniverseSplitter_RetrieveStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseSplitterServer).RetrieveStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.freeuniversesplitter.UniverseSplitter/RetrieveStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseSplitterServer).RetrieveStats(ctx, req.(*RetrieveStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniverseSplitter_ReportClientError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportClientErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniverseSplitterServer).ReportClientError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.freeuniversesplitter.UniverseSplitter/ReportClientError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniverseSplitterServer).ReportClientError(ctx, req.(*ReportClientErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniverseSplitter_ServiceDesc is the grpc.ServiceDesc for UniverseSplitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniverseSplitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.freeuniversesplitter.UniverseSplitter",
	HandlerType: (*UniverseSplitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteSplit",
			Handler:    _UniverseSplitter_ExecuteSplit_Handler,
		},
		{
			MethodName: "RetrieveStats",
			Handler:    _UniverseSplitter_RetrieveStats_Handler,
		},
		{
			MethodName: "ReportClientError",
			Handler:    _UniverseSplitter_ReportClientError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
